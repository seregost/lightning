// sleep time expects milliseconds
function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}
(function($) {
  jQuery.fn.extend({
    html5_qrcode: function(qrcodeSuccess, qrcodeError, videoError) {
      return this.each(function() {
        var currentElem = $(this);

        var height = currentElem.height();
        var width = currentElem.width();

        var vidElem = $('<video id="v" width="' + width + 'px" height="' + height + 'px" autoplay></video>').appendTo(currentElem);
        var canvasElem = $('<canvas id="qr-canvas" width="' + (width - 2) + 'px" height="' + (height - 2) + 'px" style="display:none;"></canvas>').appendTo(currentElem);

        var video = vidElem[0];
        var canvas = canvasElem[0];
        var context = canvas.getContext('2d');
        context.clearRect(0, 0,  (width - 2),  (height - 2));
        var localMediaStream;

        var scan = function() {
          if (localMediaStream) {
            context.drawImage(video, 0, 0);

            try {
              qrcode.decode();
            } catch (e) {
              qrcodeError(e, localMediaStream);
            }

            $.data(currentElem[0], "timeout", setTimeout(scan, 500));

          } else {
            $.data(currentElem[0], "timeout", setTimeout(scan, 500));
          }
        };//end snapshot function

        window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

        var successCallback = function(stream) {
          video.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
          localMediaStream = stream;
          $.data(currentElem[0], "stream", stream);

          video.play();
          $.data(currentElem[0], "timeout", setTimeout(scan, 500));
        };

        // Call the getUserMedia method with our callback functions
        if (navigator.getUserMedia) {
          navigator.getUserMedia({audio: false, video: { width: (width - 2), height: (height - 2), facingMode: { exact: "environment" } }}, successCallback, function(error) {
            // Sleep for a while and try once more.
            sleep(500).then(() => {
              navigator.getUserMedia({audio: false, video: { width: (width - 2), height: (height - 2)}}, successCallback, function(error) {
                videoError(error, localMediaStream);
              })
            })
          });
        } else {
          console.log('Native web camera streaming (getUserMedia) not supported in this browser.');
          // Display a friendly "sorry" message to the user
        }

        qrcode.callback = function (result) {
          qrcodeSuccess(result, localMediaStream);
        };
      }); // end of html5_qrcode
    },
    html5_qrcode_stop: function() {
      return this.each(function() {

        //stop the stream and cancel timeouts
        $(this).data('stream').getVideoTracks().forEach(function(videoTrack) {
          videoTrack.stop();
        });
        clearTimeout($(this).data('timeout'));
      });
    }
  });
})(jQuery);
